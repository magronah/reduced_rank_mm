
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd("/home/agronahm/projects/def-bolker/agronahm/reduced_rank_mm/")
> 
> library(reformulas)
> library(Matrix)
> library(huge)
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ tidyr::expand() masks Matrix::expand()
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
✖ tidyr::pack()   masks Matrix::pack()
✖ tidyr::unpack() masks Matrix::unpack()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(dplyr)
> library(MASS)

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

> library(glmmTMB)
> library(foreach)

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

> library(NBZIMM)

Attaching package: ‘NBZIMM’

The following object is masked from ‘package:stringr’:

    fixed

> library(nlme)

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

> source("func2.R")
> source("initial_param0.R")
Generating data from the multivariate normal distribution with the scale-free graph structure....done.
Generating data from the multivariate normal distribution with the scale-free graph structure....done.
> ####################################################################
> ntaxa; nsubj; beta; betadisp; 
[1] 600
[1] 200
[1] 3
[1] 0
> 
> path  =  paste0("cov2/",nsubj,"_",ntaxa,"/")
> 
> if (!dir.exists(path)) {
+   dir.create(path, recursive = TRUE) 
+   cat("Folder created at:", path, "\n")
+ } else {
+   cat("Folder already exists at:", path, "\n")
+ }
Folder already exists at: cov2/200_600/ 
> 
> ####################################################################
> dd     =   meta_data(ntaxa, nsubj)
> dd$dummy  =    factor(1)
> ############Negative Binomial mixed models (NBMMs)############################
> mod0      =     readRDS(paste0(path,"reference_model/nbmmref.rds"))
> 
> sim_list = list()
> 
> for(i in 1:ntaxa) {
+   
+   fit  =  mod0$fit[[i]]
+   b    =  as.numeric(unlist(fit$coefficients$random))
+   beta =  as.numeric(unlist((fit$coefficients$fixed)))
+   theta_val  = as.numeric(VarCorr(fit)[, "StdDev"])[1]
+ 
+   betadisp  =   as.numeric(unlist(fit$theta))
+   sim_pars  =   lst(beta, betadisp, theta = log(theta_val), b)
+ 
+   ddd       =   dd %>% filter(taxon == i)
+ 
+   ####################################################################
+   ## check if rr is being mapped correctly
+   seed      =   i
+   form      =   formula(paste0("taxon", i, "~ group + (1 | dummy)"))
+   pars      =   simulate_new(RHSForm(form, as.form = TRUE), nsim = 1, seed = seed,
+                              newdata    =  ddd,
+                              newparams  =  sim_pars,
+                              family     =  nbinom2,
+                              return_val = "pars")
+   
+   stopifnot(b == pars[names(pars) == "b"])
+   #####################################################################
+   #now simulate data using b_est
+   sim_list[[i]]  =  simulate_new(RHSForm(form, as.form = TRUE), nsim = nsim, seed = seed,
+                       newdata   =  ddd,
+                       newparams =  sim_pars,
+                       family    =  nbinom2,
+                       return_val = "sim")
+   
+ }
> names(sim_list)  =  paste0("taxon",1:ntaxa)
> 
> result <- lapply(1:nsim, function(j) {
+   data.frame(do.call(cbind, lapply(sim_list, function(lst) lst[[j]])))
+ })
> 
> sim_dd  <- lapply(1:nsim, function(k) { 
+   list(countdata =  result[[k]], 
+        met_data   =  ddd)})
> 
> names(sim_dd)  =  paste0("sim", 1:nsim)
> saveRDS(sim_dd, file=paste0(path,"sim_data/nbmm_otu_meta_list_withzi_taxa.rds"))
> ##############################################################################
> # for(r in 1:ntaxa){
> #   pp=sim_list[[r]][[1]]
> #   stopifnot(sim_dd[[1]][[1]][,r] == pp)
> # }
> 
> 
> proc.time()
   user  system elapsed 
309.859   9.669 337.407 
